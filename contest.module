<?php

/**
 * @file
 * The contest module file.
 */

/**
 * Implementation of hook_block_info().
 */
function contest_block_info() {
  return array(
    'contest_featured' => array(
      'info'       => t('Contest Featured'),
      'cache'      => DRUPAL_CACHE_PER_ROLE,
      'pages'      => '<front>',
      'region'     => 'content',
      'status'     => 1,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'weight'     => 0,
    ),
  );
}
/**
 * Implementation of hook_block_view().
 */
function contest_block_view($delta = '') {
  switch ($delta) {
    case 'contest_featured':
      return array(
        'content' => theme('contest_contest_featured_block', _contest_get_contest_featured_block_data()),
      );
  }
  return array();
}
/**
 * Contest entry form.
 *
 * @return $form (array) A Drupal form array.
 */
function contest_entry_form() {
  global $user;
  $states = _contest_get_states(variable_get('site_default_country', ''));

// Add the JavaScript and CSS.

  drupal_add_css(drupal_get_path('module', 'contest') . '/css/contest.css');
  drupal_add_js(drupal_get_path('module', 'contest') . '/js/contest.js');

// Load the full user object.

  $usr = user_load($user->uid);

  $birthday = _contest_get_usr_val($usr, 'field_contest_birthdate', 0, REQUEST_TIME);

// Build the form.

  $form = array(
    '#id'       => 'contest-entry-form',
    '#submit'   => array('contest_entry_form_submit'),
    '#validate' => array('contest_entry_form_validate'),
  );
  $form['uid'] = array(
    '#type'   => 'hidden',
    '#value'  =>  $usr->uid,
    '#weight' => -10,
  );
  $form['nid'] = array(
    '#type'   => 'hidden',
    '#value'  =>  intval(arg(1)),
    '#weight' => -10,
  );
  $form['heading2'] = array(
    '#type'   => 'markup',
    '#value'  => $usr->uid? '': '<b>' . t('Please fill in and submit the form below; all fields are required.') . '</b><p>' . t('If you already have an account click <a href="/user/login">here</a> to log in and skip filling in the form.' . '</p>'),
    '#weight' => -1,
  );
  $form['contest_name'] = array(
    '#title'         => t('Name'),
    '#type'          => 'textfield',
    '#attributes'    => array('pattern' => '^\s*[\s\w\-\.]+\s*$'),
    '#default_value' => _contest_get_usr_val($usr, 'field_contest_name'),
    '#size'          => 30,
    '#maxlength'     => 100,
    '#required'      => TRUE,
    '#weight'        => 0,
  );
  $form['contest_address'] = array(
    '#title'         => t('Address'),
    '#type'          => 'textfield',
    '#attributes'    => array('pattern' => '^\s*[\s\w\-\.\,#]+\s*$'),
    '#default_value' => _contest_get_usr_val($usr, 'field_contest_address'),
    '#size'          => 30,
    '#maxlength'     => 100,
    '#required'      => TRUE,
    '#weight'        => 1,
  );
  $form['contest_city'] = array(
    '#title'         => t('City'),
    '#type'          => 'textfield',
    '#attributes'    => array('pattern' => '^\s*[\s\w\-\.]+\s*$'),
    '#default_value' => _contest_get_usr_val($usr, 'field_contest_city'),
    '#size'          => 30,
    '#maxlength'     => 50,
    '#required'      => TRUE,
    '#weight'        => 2,
  );
  if (!empty($states)) {
    $form['contest_state'] = array(
      '#title'         => t('State'),
      '#type'          => 'select',
      '#attributes'    => array('pattern' => '^.+$'),
      '#options'       => array_merge(array('' => t(' -Select- ')), $states),
      '#default_value' => _contest_get_usr_val($usr, 'field_contest_state'),
      '#required'      => TRUE,
      '#weight'        => 3,
    );
  }
  else {
    $form['contest_state'] = array(
      '#title'         => t('Province'),
      '#type'          => 'textfield',
      '#attributes'    => array('pattern' => '^.+$'),
      '#default_value' => _contest_get_usr_val($usr, 'field_contest_state'),
      '#size'          => 30,
      '#maxlength'     => 50,
      '#required'      => FALSE,
      '#weight'        => 3,
    );
  }
  $form['contest_zip'] = array(
    '#title'         => t('Zip'),
    '#type'          => 'textfield',
    '#attributes'    => array('pattern' => '^\s*\d+\s*$'),
    '#default_value' => _contest_get_usr_val($usr, 'field_contest_zip'),
    '#size'          => 30,
    '#maxlength'     => 5,
    '#required'      => TRUE,
    '#weight'        => 4,
  );
  $form['mail'] = array(
    '#title'         => t('Email'),
    '#type'          => 'textfield',
    '#attributes'    => array('pattern' => '^\s*[\w\-\.]+@[\w\-\.]+\.\w+\s*$'),
    '#default_value' => !empty($usr->mail)? $usr->mail: '',
    '#size'          => 30,
    '#maxlength'     => 100,
    '#required'      => TRUE,
    '#weight'        => 5,
  );
  $form['contest_phone'] = array(
    '#title'         => t('Phone'),
    '#type'          => 'textfield',
    '#default_value' => _contest_get_usr_val($usr, 'field_contest_phone'),
    '#size'          => 30,
    '#maxlength'     => 20,
    '#required'      => FALSE,
    '#weight'        => 6,
  );
  $form['contest_birthdate'] = array(
    '#title'         => t('Birthday'),
    '#type'          => 'date',
    '#default_value' => array(
      'month' => format_date($birthday, 'custom', 'n'),
      'day'   => format_date($birthday, 'custom', 'j'),
      'year'  => format_date($birthday, 'custom', 'Y'),
    ),
    '#required'      => FALSE,
    '#weight'        => 7,
  );
  $form['contest_optin'] = array(
    '#title'         => t('Opt In'),
    '#type'          => 'checkbox',
    '#description'   => t("I'd like to receive information about contests and special offers from the sponsor and promoter."),
    '#attributes'    => array('pattern' => '^\d$'),
    '#prefix'        => '<div id="contest-optin">',
    '#suffix'        => '</div>',
    '#default_value' => 1,
    '#required'      => FALSE,
    '#weight'        => 8,
  );
  $form['clear_both'] = array(
    '#prefix' => '<div class="clr">',
    '#suffix' => '</div>',
    '#type'   => 'markup',
    '#value'  => '&nbsp;',
    '#weight' => 9,
  );
  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Enter Contest'),
    '#weight' => 10,
  );
  return $form;
}
/**
 * Custom validation function for the contest setting form.
 */
function contest_entry_form_submit($form, &$form_state) {
  global $user;
  $periods = variable_get('contest_period', array(86400 => 'Daily'));

// Users must have all their personal information filled out to enter a contest.

  $form_state['values']['uid'] = _contest_contestant($form_state);

  $usr = user_load($form_state['values']['uid']);

// If they're not logged in, are already a user and have an incomplete profile give them the explanation and redirect them to the login page.

  if ($user->uid != $usr->uid && (empty($usr->field_contest_name) || empty($usr->field_contest_address) || empty($usr->field_contest_city) || empty($usr->field_contest_state) || empty($usr->field_contest_zip))) {
    drupal_set_message('You already have an account with an incomplete profile. The easiest way to enter the contest is to log in and come back and enter the contest.', 'error');
    drupal_set_message('Once your profile is complete you won\'t have to do this again.');
    drupal_set_message('If you have problems logging in click the "Request new password" link and a login link will be sent to your email.');
    return 'user';
  }
// I don't think this should ever get used, but...

  elseif (empty($usr->field_contest_name) || empty($usr->field_contest_address) || empty($usr->field_contest_city) || empty($usr->field_contest_state) || empty($usr->field_contest_zip)) {
    drupal_set_message('You must have a complete profile to enter a contest.', 'error');
    return "user/$usr->uid/edit/Contest";
  }
// We'll check to see if the contest is running by getting the entry period.

  $values = array(
    ':end'   => REQUEST_TIME,
    ':nid'   => $form_state['values']['nid'],
    ':start' => REQUEST_TIME,
  );
  $period = db_query_range("SELECT period FROM {contest} WHERE nid = :nid AND start < :start AND :end < end", 0, 1, $values)->fetchField();

  if (!$period) {
    drupal_set_message('This contest is closed.', 'error');
    return 'contest';
  }
// Check to see if they've entered today.

  $entered = _contest_get_entered($form_state['values']['uid'], $form_state['values']['nid'], $period);

  if ($entered) {
    drupal_set_message("You can enter the contest {$periods[$period]}. We already have an entry for you during this period.", 'error');
    return "node/{$form_state['values']['nid']}";
  }
// Enter them into the contest.

  $fields = array(
    'nid'     => $form_state['values']['nid'],
    'uid'     => $usr->uid,
    'created' => REQUEST_TIME,
    'ip'      => ip_address(),
  );
  return db_insert('contest_entry')->fields($fields)->execute();

  drupal_set_message('You have been entered into the contest.');

// Redirect to the contest page.

  return 'node/' . $form_state['values']['nid'];
}
/**
 * Custom submit function for the contest entry form.
 * Check for the opt in.
 */
function contest_entry_form_validate($form, &$form_state) {
  if (!_contest_min_age($form_state['values']['contest_birthdate'])) {
    form_set_error('contest_birthdate', t("You must be at least @age years old to enter.", array('@age' => variable_get('contest_min_age', 18))));
  }
  if ($form_state['values']['contest_optin'] != 1) {
    form_set_error('contest_optin', t("You must agree to be contacted by the contest's sponsors and host to enter."));
  }
}
/**
 * Implements hook_field_extra_fields().
 */
function contest_field_extra_fields() {
  $extra['node']['contest'] = array(
    'display' => array(
      'contest_entry_form' => array(
        'label'       => t('Contest Entry Form'),
        'description' => t('Allows a user to enter a contest.'),
        'weight'      => 1,
      ),
    ),
  );
  return $extra;
}
/**
 * Implementation of hook_form().
 */
function contest_form($node, $form_state) {
  $end = !empty($node->contest->end)? $node->contest->end: REQUEST_TIME;
  $start = !empty($node->contest->start)? $node->contest->start: REQUEST_TIME;
  $type = node_type_get_type($node);

  $form['#submit'][] = 'contest_form_submit';
  $form['#validate'][] = 'contest_form_validate';

  $form['title'] = array(
    '#title'         => check_plain($type->title_label),
    '#type'          => 'textfield',
    '#default_value' => !empty($node->title)? $node->title: '',
    '#required'      => TRUE,
    '#weight'        => 0,
  );
  $form['sponsor'] = array(
    '#title'         => t('Contest Sponsor'),
    '#type'          => 'textfield',
    '#default_value' => !empty($node->contest->sponsor)? $node->contest->sponsor: '',
    '#required'      => FALSE,
    '#weight'        => 20,
  );
  $form['sponsor_email'] = array(
    '#title'         => t('Sponsor Email'),
    '#type'          => 'textfield',
    '#default_value' => !empty($node->contest->sponsor_email)? $node->contest->sponsor_email: '',
    '#required'      => FALSE,
    '#weight'        => 30,
  );
  $form['sponsor_url'] = array(
    '#title'         => t('Sponsor Url'),
    '#type'          => 'textfield',
    '#default_value' => !empty($node->contest->sponsor_url)? $node->contest->sponsor_url: '',
    '#required'      => FALSE,
    '#weight'        => 40,
  );
  $form['places'] = array(
    '#title'         => t('Winning Places'),
    '#type'          => 'select',
    '#options'       => drupal_map_assoc(range(1, 10)),
    '#default_value' => !empty($node->contest->places)? $node->contest->places: 1,
    '#required'      => TRUE,
    '#weight'        => 50,
  );
  $form['period'] = array(
    '#title'         => t('User Can Enter'),
    '#type'          => 'select',
    '#options'       => variable_get('contest_period', array(86400 => 'Daily')),
    '#default_value' => !empty($node->contest->period)? $node->contest->period: 86400,
    '#required'      => TRUE,
    '#weight'        => 60,
  );
  $form['start'] = array(
    '#title'         => t('Start Contest'),
    '#type'          => 'date',
    '#default_value' => array(
      'month' => format_date($start, 'custom', 'n'),
      'day'   => format_date($start, 'custom', 'j'),
      'year'  => format_date($start, 'custom', 'Y'),
    ),
    '#required'      => TRUE,
    '#weight'        => 70,
  );
  $form['end'] = array(
    '#title'         => t('End Contest'),
    '#type'          => 'date',
    '#default_value' => array(
      'month' => format_date($end, 'custom', 'n'),
      'day'   => format_date($end, 'custom', 'j'),
      'year'  => format_date($end, 'custom', 'Y'),
    ),
    '#required'      => TRUE,
    '#weight'        => 80,
  );
  return $form;
}
/**
 * Custom submit function.
 */
function contest_form_submit($form, &$form_state) {
  $node = $form_state['node'];
  $fields = array(
    'period',
    'places',
    'sponsor',
    'sponsor_email',
    'sponsor_url',
  );
  $node->contest->start = _contest_mktime($form_state['values']['start']);
  unset($form_state['values']['start']);

  $node->contest->end = _contest_mktime($form_state['values']['end']);
  unset($form_state['values']['end']);

  foreach ($fields as $field) {
    if (!empty($form_state['values'][$field])) {
      $node->contest->$field = $form_state['values'][$field];
      unset($form_state['values'][$field]);
    }
  }
}
/**
 * Implementation of hook_form_alter().
 */
function contest_form_user_profile_form_alter(&$form, &$form_state) {
  $states = _contest_get_states(variable_get('site_default_country', ''));

  if (!empty($states)) {
    $form['field_contest_state'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
    $form['field_contest_state'][LANGUAGE_NONE][0]['value']['#options'] = array_merge(array('' => t(' -Select- ')), $states);
    $form['field_contest_state'][LANGUAGE_NONE][0]['value']['#size'] = 1;
  }
  else {
    $form['field_contest_state'][LANGUAGE_NONE][0]['value']['#access'] = FALSE;
    $form['field_contest_state'][LANGUAGE_NONE][0]['value']['#required'] = FALSE;
  }
}
/**
 * Custom validation function.
 */
function contest_form_validate($form, &$form_state) {
  $start = _contest_mktime($form_state['values']['start']);
  $end = _contest_mktime($form_state['values']['end']);
  $day = 86400;

// If the end date is before the start date set an error.

  if ($end < $start) {
    form_set_error('end', 'Contest cannot end before it starts.');
  }
// If the end date is the same as the start date set an error.

  if (($end - $start) < $day) {
    form_set_error('start', 'Contest must run for at least one day.');
  }
}
/**
 * Display the administration information about a contest.
 *
 * @param $nid (int) The node ID.
 *
 * @return $table (string) An HTML table with the contest information.
 */
function contest_information($node = NULL) {
dpm($node);  
  return '<h1>Woo Hoo!</h1>';
  drupal_add_css(drupal_get_path('module', 'contest') . '/css/contest.css');
  $admin_rows = FALSE;
  $count = 0;
  $end = 0;
  $header = FALSE;
  $i = 0;
  $now = time();
  $table_rows = '';
  $users = 0;
  $winners = array();
  $winner_rows = '';

  if (!user_access('edit contest')) {
    return '';
  }
// Build the host information fieldset.

  $host_title = variable_get('contest_host_title', '');
  $host = user_load(variable_get('contest_host_uid', 1));
  $host_address = "$host->contest_address, $host->contest_city, $host->contest_state $host->contest_zip";
  $host_phone = $host->contest_phone;
  $host_fieldset = "<fieldset class=\"contest-host\"><legend>Host</legend><a href=\"/user/$host->uid\">$host_title</a><br><a href=\"mailto:$host->mail\">$host->mail</a><br>$host_phone<br>$host_address</fieldset>";

// Find out if the winners are published.

  $published = db_result(db_query("SELECT publish_winners FROM {contest} WHERE nid = %d", $node->nid));

// Build an array of winners ordered by place.

  $result = db_query("SELECT uid, winner FROM {contest_entry} WHERE nid = %d AND winner > 0 ORDER BY winner ASC", $node->nid);

  while ($row = db_fetch_object($result)) {
    $places[$row->uid] = $row->winner;
  }
// Build the header and rows or entries counting the users and entries as we go.

  $stmt = "
    SELECT
      u.uid,
      u.name,
      u.mail AS 'email',
      COUNT(e.nid) AS 'cnt',
      c.sponsor_url,
      c.sponsor_uid,
      c.start,
      c.end,
      c.places,
      e.created,
      n.title,
      s.name AS 'sponsor',
      s.mail AS 'sponsor_email'
    FROM
      {contest_entry} e
      JOIN {node} n ON n.nid = e.nid
      JOIN {contest} c ON c.nid = n.nid
      JOIN {users} u ON u.uid = e.uid
      JOIN {users} s ON s.uid = c.sponsor_uid
    WHERE
      e.nid = %d
    GROUP BY
      u.uid
    ORDER BY
      cnt DESC,
      u.name ASC
  ";
  $result = db_query($stmt, $node->nid);

  while ($row = db_fetch_object($result)) {

    if (!$row->email) {
      continue;
    }
    if (!$header) {
      $start = $row->start;
      $start_date = date('F j Y H:i:s', $row->start);
      $end = $row->end;
      $end_date = date('F j Y H:i:s', $row->end);
      $places_allowed = $row->places;
      $header = "<tr><th colspan=4>$row->title</td></tr><tr><td colspan=4 class=\"contest-host-sponsor-wrapper\">$host_fieldset<fieldset class=\"contest-sponsor\"><legend>Sponsor</legend><a href=\"/user/$row->sponsor_uid\">$row->sponsor</a><br><a href=\"mailto:$row->sponsor_email\">$row->sponsor_email</a><br><a href=\"http://$row->sponsor_url\" target=\"_blank\">$row->sponsor_url</a></fieldset></th></tr>";
    }
    if (isset($places[$row->uid])) {
      $winners[$places[$row->uid]] = "&nbsp;<a href=\"/user/$row->uid\">$row->name</a></td><td>&nbsp;<a href=\"mailto:$row->email\">$row->email</a></td><td>&nbsp;<a href=\"/contest/clear_winner/$node->nid/$row->uid\">Clear</a></td></tr>";
    }
    $table_rows .= '<tr' . (isset($places[$row->uid])? ' class="contest-winner"': '') . "><td>&nbsp;<a href=\"/user/$row->uid\">$row->name</a></td><td>&nbsp;<a href=\"mailto:$row->email\">$row->email</a></td><td>&nbsp;$row->cnt</td><td>&nbsp;" . (isset($places[$row->uid])? "<a href=\"/contest/clear_winner/$node->nid/$row->uid\">Clear</a>": "<a href=\"/contest/pick_winner/$node->nid/$row->uid\">Pick</a>") . "</td></tr>";
    $table_rows .= "</td></tr>";

    $count += $row->cnt;
    $users++;
  }
// Build the rows of winners.

  if (count($winners)) {
    $winner_rows = "<tr><th colspan=4>Contest Winners</th></tr>";
    ksort($winners);
    foreach ($winners as $winner) {
      $winner_rows .= '<tr><td>' . (++$i) . ".$winner";
    }
  }
// Build the admin functions.

  if ($end < $now || count($winners)) {
    $admin_rows = "<tr><td colspan=4><ul><li><a href=\"/contest/pick_winner/$node->nid\">Pick Random Winner</a></li>";
    $admin_rows .= $published? "<li><a href=\"/contest/unpublish_winners/$node->nid\">Unpublish Winners</a></li>": "<li><a href=\"/contest/publish_winners/$node->nid\">Publish Winners</a></li>";
    $admin_rows .= "<li><a href=\"/contest/clear_winners/$node->nid\">Clear All Winners</a></li></ul></td></tr>";
    $admin_rows .= "<tr><td colspan=4><ul><li><a href=\"/contest/export_entries/$node->nid\">Export Entries</a></li>";
    $admin_rows .= "<li><a href=\"/contest/export_unique/$node->nid\">Export Unique Users</a></li></ul></td></tr>";
  }
// Put the table together and return it.

  $table = '<table id="contest-information">';
  $table .= $header;
  $table .= "<tr><td colspan=4><b>Start Date:</b>&nbsp;$start_date<br><b>End Date:</b>&nbsp;$end_date<br><b>Total Entries:</b>&nbsp;$count<br><b>Total Users:</b>&nbsp;$users<br><b>Places Allowed:</b>&nbsp;$places_allowed";
  $table .= $admin_rows? "<br><b>Winners Published:</b>&nbsp;" . ($published? 'True': 'False') . '</th></tr>': '</th></tr>';
  $table .= $admin_rows? $admin_rows: '';
  $table .= $winner_rows;
  $table .= "<tr><th colspan=4>Contest Entries</th></tr>";
  $table .= "<tr><td>&nbsp;<b>Name</b></td><td>&nbsp;<b>Email</b></td><td>&nbsp;<b>Count</b></td><td>&nbsp;<b>Winner</b></td></tr>";
  $table .= $table_rows;
  $table .= '</table>';

  return $table;
}

/**
 * Implementation of hook_insert().
 */
function contest_insert($node) {
  $sponsor_uid = _contest_add_usr($node->contest->sponsor, $node->contest->sponsor_email);

  if (!db_query_range("SELECT 1 FROM {contest} WHERE nid = :nid", 0, 1, array(':nid' => $node->nid))->fetchField()) {
    return contest_update($node)? TRUE: FALSE;
  }
  $fields = array(
    'nid'         => $node->nid,
    'vid'         => $node->vid,
    'sponsor_uid' => $sponsor_uid,
    'sponsor_url' => $node->contest->sponsor_url,
    'start'       => $node->contest->start,
    'end'         => $node->contest->end,
    'places'      => $node->contest->places,
    'period'      => $node->contest->period,
  );
  return db_insert('contest')->fields($fields)->execute()? TRUE: FALSE;
}
/**
 * Implementation of hook_load().
 */
function contest_load(&$nodes) {
  $stmt = "
    SELECT
      u.name AS 'sponsor',
      u.mail AS 'sponsor_email',
      c.sponsor_url,
      c.start,
      c.end,
      c.places,
      c.period,
      c.publish_winners
    FROM
      {contest} c
      LEFT JOIN {users} u ON u.uid =  c.sponsor_uid
    WHERE
      c.nid = :nid
  ";
  foreach ($nodes as $nid => $node) {
    $node->contest = db_query_range($stmt, 0, 1, array(':nid' => $nid))->fetchObject();
  }
}
/**
 * Implementation of hook_menu().
 */
function contest_menu() {
  $items['admin/config/contest'] = array(
    'title'            => 'Contest Settings',
    'description'      => 'Custom settings for the Contest site.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('contest_settings_form'),
    'access arguments' => array('administer contest'),
    'file'             => 'contest.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['contest/usr-autocomplete'] = array(
    'page callback'     => 'contest_usr_autocomplete',
    'delivery callback' => 'ajax_callback',
    'access arguments'  => array('access content'),
    'type'              => MENU_CALLBACK,
  );
  $items['node/%node/contest-admin'] = array(
    'title'            => 'Contest',
    'page callback'    => 'contest_information',
    'page arguments'   => array(1),
    'access arguments' => array('administer contest'),
    'weight'           => 1,
    'type'             => MENU_LOCAL_TASK,
  );
  return $items;
}
/**
 * Implementation of hook_node_info().
 */
function contest_node_info() {
  return array(
    'contest' => array(
      'name'        => t('Contest'),
      'description' => t('A <em>contest</em> is a content type that allows a user to enter to win prizes via a random selection.'),
      'base'        => 'contest',
      'has_body'    => TRUE,
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'help'        => '',
      'locked'      => TRUE,
    ),
  );
}
/**
 * Implementation of hook_permission().
 */
function contest_permission() {
  return array(
    'administer contest' => array(
      'title'       => t('Administer the Contest Module'),
      'description' => t('Perform administration tasks for the contest module.'),
    ),
  );
}
/**
 * Implimentation of hook_theme().
 */
function contest_theme() {
  return array(
    'contest_featured_block' => array(
      'path'     => _contest_get_template_path('contest', 'contest-featured-block'),
      'template' => 'contest-featured-block',
    ),
  );
}
/**
 * Implementation of hook_update().
 */
function contest_update($node) {
  $sponsor_uid = _contest_add_usr($node->contest->sponsor, $node->contest->sponsor_email);

  if (!db_query_range("SELECT 1 FROM {contest} WHERE nid = :nid", 0, 1, array(':nid' => $node->nid))->fetchField()) {
    return contest_insert($node)? TRUE: FALSE;
  }
  $fields = array(
    'nid'         => $node->nid,
    'sponsor_uid' => $sponsor_uid,
    'sponsor_url' => $node->contest->sponsor_url,
    'start'       => $node->contest->start,
    'end'         => $node->contest->end,
    'places'      => $node->contest->places,
    'period'      => $node->contest->period,
  );
  return db_update('contest')->fields($fields)->condition('vid', $node->vid)->execute()? TRUE: FALSE;
}
/**
 * .
 */
function contest_usr_autocomplete($name = '') {
  return drupal_json_output(db_query("SELECT name, name FROM {users} WHERE name LIKE :name", array(':name' => "$name%"))->fetchAllKeyed());
}
/**
 * Implements hook_view().
 */
function contest_view($node, $view_mode) {
  if ($node->contest->start < REQUEST_TIME && REQUEST_TIME < $node->contest->end) {
    $node->content['contest_entry_form'] = drupal_get_form('contest_entry_form', $node);
  }
  else {
    #$node->content['contest_results'] = array('#markup' => theme('contest_results', $node, $view_mode));
  }
  return $node;
}
/**
 * Laod or add a user and return their ID.
 *
 * @param $name (string) The user name.
 * @param $email (string) The user email.
 *
 * @return (int) The user's ID.
 *
 */
function _contest_add_usr($name, $email) {
  $email = strtolower(trim($email));

  if (!$name || !$email) {
    return NULL;
  }
// Try to load the user.

  $usr = user_load(array('mail' => $email));

// If they don't exist, create them.

  if (!$usr->uid) {
    $args = array(
      'mail'   => $email,
      'name'   => _contest_name_gen($name),
      'pass'   => _contest_email_to_password($email),
      'roles'  => array(2 => 'authenticated user'),
      'status' => 1,
    );
    $usr = user_save($usr, $args);
  }
// Return the user's id.

  return $usr->uid;
}
/**
 * Build and return a cache ID and resoectuve cached data.
 *
 * @param $seeds (string|mixed) Data used to build a unique cache ID.
 *
 * @return (array) A two element ordered array of: cache ID, cached data.
 */
function _contest_cache_get($seeds = array()) {
  global $conf;
  $cid = FALSE;
  $seeds = (array) $seeds;

  if (empty($conf['core_devel'])) {
    $cid = _contest_cid($seeds);

    $cache = $cid? cache_get($cid): FALSE;

    if ($cache !== FALSE) {
      return array($cid, $cache->data);
    }
  }
  return array($cid, FALSE);
}
/**
 * Set the cache and return the data.
 *
 * @param $cid (string) The cache ID.
 * @param $data (mixed) The cached data.
 *
 * @return $data (mixed) The submitted, (and cached) data.
 */
function _contest_cache_set($cid, $data) {
  global $conf;

  if (empty($conf['core_devel']) && !empty($cid)) {
    cache_set($cid, $data, 'cache', CACHE_TEMPORARY);
  }
  return $data;
}
/**
 * Generate a cache ID.
 *
 * @param $args (string|array) The string(s) to build the cache ID from.
 *
 * @return $cid (string) A unique cache ID.
 */
function _contest_cid($args = '') {
  $args = (array) $args;
  $cid = '';

  foreach ($args as $arg) {
    $cid .= (is_array($arg) || is_object($arg))? _contest_cid($arg): "-$arg";
  }
  return ($cid && strlen($cid) < 255)? _contest_stroked($cid): 'contest-' . md5($cid);
}
/**
 * Process the path into a OS safe string.
 *
 * @param $path (string) A directory name.
 *
 * @return (string) An OS safe string.
 */
function _contest_clean_path($path) {
  $regx = array(
    '/[[:^print:]]/s' => '',
    '/\W+/s'          => '_',
    '/__+/'           => '_',
    '/^_+|_+$/'       => '',
  );
  return preg_replace(array_keys($regx), array_values($regx), strtolower($path));
}
/**
 * Find or add a contestant then return the uid.
 *
 * @param $form_state (array) The submitted contest entry form.
 *
 * @return (int) The entrant's user ID.
 */
function _contest_contestant($form_state) {
  global $user;

// Try to get the user by uid or email.

  $usr = user_load($form_state['values']['uid']);

  if (empty($usr->uid)) {
    $usr = user_load_by_mail($form_state['values']['mail']);
  }
// If we have them and the match the global user, (should be superfluos) update their information.

  if (!empty($usr->uid) && $usr->uid === $user->uid) {
    $usr = _contest_usr_save($usr, $form_state);
    return $usr->uid;
  }
// If we have a valid user return their ID.

  elseif (!empty($usr->uid)) {
    return $usr->uid;
  }
// If they don't exist, create them.

  if (empty($usr->uid)) {
    $args['name'] = _contest_name_gen($form_state['values']['contest_name']);
    $args['mail'] = $form_state['values']['mail'];
    $args['pass'] = _contest_email_to_password($form_state['values']['mail']);
    $args['roles'] = array(2 => 'authenticated user');
    $args['status'] = 1;

// Save the new user.

    $usr = _contest_usr_save(user_save($usr, $args), $form_state);
return $usr->uid;
// Build the message variables, send out the welcome email and set the welcome message.

    $site_name = variable_get('site_name', 'Contest Host');
    $vars = array(
      '!date'      => format_date(time()),
      '!edit_uri'  => url("user/$usr->uid/edit", array('absolute' => TRUE)),
      '!login_uri' => url('user', array('absolute' => TRUE)),
      '!login_url' => user_pass_reset_url($usr),
      '!password'  => $args['pass'],
      '!site'      => $site_name,
      '!site team' => $site_name,
      '!username'  => $args['name'],
    );
    $mail = drupal_mail('contest', 'register_no_approval_required', $usr->mail, user_preferred_language($usr), array('account' => $usr, 'vars' => $vars));

    drupal_set_message("You have been added to the $site_name website. Below is your login information.<br>Username: $usr->name<br>Password: {$args['pass']}.<br>Please keep this information for you records. If you have a problem logging in, use the password recovery tool located at the top of the user's login page.");

// Log them in.

    user_authenticate($usr->name, trim($args['pass']));
    user_module_invoke('login', $edit, $usr);
  }
// Return the user's id.

  return $usr->uid;
}
/**
 * Create the export directory.
 *
 * @param $path (string) The export directory name.
 *
 * @return (bool) True if the directory exists, otherwise false.
 */
function _contest_create_export_directory($path) {
  $path = _contest_clean_path($path);
  $wrapper = file_stream_wrapper_get_instance_by_uri('private://');

  if (!$path || !$wrapper) {
    return FALSE;
  }
  $export_dir = $wrapper->getDirectoryPath() . "/$path";

  if (!is_dir($export_dir)) {
    mkdir($export_dir);
    chmod($export_dir, 0777);
  }
  return is_dir($export_dir);
}
/**
 * Generate a password from an email address.
 *
 * @param $email (string) The user's email address.
 *
 * @return (string) A password that hopefully isn't too terrible.
 */
function _contest_email_to_password($email = '') {
  return $email? preg_replace('/@.*/', '', $email) . '-' . substr(md5(time() . rand(0, 100)), 0, rand(4, 6)): substr(md5(time() . rand(0, 100)), 0, rand(8, 12));
}
/**
 * Send the feedback to the appropriate place.
 *
 * @param $txt (string) The string to print.
 */
function _contest_feedback($txt) {
  if (defined('STDIN')) {
    print "$txt\n";
  }
  else {
    drupal_set_message($txt);
  }
}
/**
 * Build the data needed to display the blog block.
 *
 * @return $data (object) An object with the data to display a client page.
 */
function _contest_get_contest_featured_block_data() {
  $data = array();
  list($cid, $cache) = _contest_cache_get(__FUNCTION__);

  if ($cache !== FALSE) {
    return $cache;
  }
  return _contest_cache_set($cid, array('data' => $data));
}
/**
 * Return true if entered in the contest during this period, (configuarble).
 *
 * @param $nid (int) The node ID.
 * @param $uid (int) The user's ID.
 * @param $period (int) The seconds allowed between entries.
 *
 * @return (bool) True if the user has entered the contest already durring this period.
 */
function _contest_get_entered($uid, $nid, $period) {
  $periods = variable_get('contest_period', array(86400 => 'daily', 2147483646 => 'once'));
  $fmt = array(
    86400    => 'Y-m-d',
    604800   => 'Y-W',
    2592000  => 'Y-m',
    31536000 => 'Y',
  );
// If it's a one entry contest check for an entry and return.

  if ($periods[$period] == 'once') {
    return db_query_range("SELECT 1 FROM {contest_entry} WHERE uid = :uid AND nid = :nid", 0, 1, array(':nid' => $nid, ':uid' => $uid))->fetchField();
  }
// If we can't figure out the format. We'll assume the worst and return TRUE.

  if (empty($fmt[$period])) {
    return TRUE;
  }
// Determin if the user has already enter the conetest.

  $today = date($fmt[$period], REQUEST_TIME);
  $entered = date($fmt[$period], db_query_range("SELECT created FROM {contest_entry} WHERE uid = :uid AND nid = :nid ORDER BY created DESC", 0, 1, array(':nid' => $nid, ':uid' => $uid))->fetchField());

  return ($entered == $today)? TRUE: FALSE;
}
/**
 * Gets the states for the selected country.
 *
 * @param $country (string) The ISO country code.
 *
 * @return (array) An ISO code to country name hash.
 */
function _contest_get_states($country = 'US') {
  switch ($country) {
    case 'CA':
      return array(
        'AB' => 'Alberta',
        'BC' => 'British Columbia',
        'MB' => 'Manitoba',
        'NB' => 'New Brunswick',
        'NL' => 'Newfoundland and Labrador',
        'NS' => 'Nova Scotia',
        'ON' => 'Ontario',
        'PE' => 'Prince Edward Island',
        'QC' => 'Quebec',
        'SK' => 'Saskatchewan',
        'NT' => 'Northwest Territories',
        'NU' => 'Nunavut',
        'YT' => 'Yukon',
      );
    case 'US':
      return array(
        'AL' => 'Alabama',
        'AK' => 'Alaska',
        'AZ' => 'Arizona',
        'AR' => 'Arkansas',
        'CA' => 'California',
        'CO' => 'Colorado',
        'CT' => 'Connecticut',
        'DE' => 'Delaware',
        'DC' => 'District Of Columbia',
        'FL' => 'Florida',
        'GA' => 'Georgia',
        'HI' => 'Hawaii',
        'ID' => 'Idaho',
        'IL' => 'Illinois',
        'IN' => 'Indiana',
        'IA' => 'Iowa',
        'KS' => 'Kansas',
        'KY' => 'Kentucky',
        'LA' => 'Louisiana',
        'ME' => 'Maine',
        'MD' => 'Maryland',
        'MA' => 'Massachusetts',
        'MI' => 'Michigan',
        'MN' => 'Minnesota',
        'MS' => 'Mississippi',
        'MO' => 'Missouri',
        'MT' => 'Montana',
        'NE' => 'Nebraska',
        'NV' => 'Nevada',
        'NH' => 'New Hampshire',
        'NJ' => 'New Jersey',
        'NM' => 'New Mexico',
        'NY' => 'New York',
        'NC' => 'North Carolina',
        'ND' => 'North Dakota',
        'OH' => 'Ohio',
        'OK' => 'Oklahoma',
        'OR' => 'Oregon',
        'PA' => 'Pennsylvania',
        'RI' => 'Rhode Island',
        'SC' => 'South Carolina',
        'SD' => 'South Dakota',
        'TN' => 'Tennessee',
        'TX' => 'Texas',
        'UT' => 'Utah',
        'VT' => 'Vermont',
        'VI' => 'Virgin Islands',
        'VA' => 'Virginia',
        'WA' => 'Washington',
        'WV' => 'West Virginia',
        'WI' => 'Wisconsin',
        'WY' => 'Wyoming',
      );
  }
  return array();
}
/**
 * Scan the theme and module directories in that order for the template and return the path to the template's directory.
 *
 * @param $module (string) The module name, (without the suffix).
 * @param $template (string) The template name, (without the suffixes).
 *
 * @return (string) A Drupal path to the template's directory, (defaults to .../module/templates).
 */
function _contest_get_template_path($module, $template = '') {
  $theme_path = drupal_get_path('theme', variable_get('theme_default', 'garland'));

  $scan = file_scan_directory($theme_path, "/^$template\.tpl\.php$/", array('recurse' => TRUE, 'filename' => TRUE));

  if (!count($scan)) {
    $scan = file_scan_directory(drupal_get_path('module', $module), "/^$template\.tpl\.php$/", array('recurse' => TRUE, 'filename' => TRUE));
  }
  return count($scan)? preg_replace('/(\/[^\/]+)$/', '', key($scan)):  drupal_get_path('module', $module) . '/templates';
}
/**
 * Extract the contest profile value from the user object.
 *
 * @param $usr (object) A Drupal user object.
 * @param $field (string) The field name.
 *
 * @return (string) The safe_value if set.
 */
function _contest_get_usr_val($usr = NULL, $field = '', $index = 0, $default = NULL) {
  if (!is_object($usr) || empty($field)) {
    return NULL;
  }
  if (!empty($usr->{$field}[LANGUAGE_NONE][$index]['safe_value'])) {
    return $usr->{$field}[LANGUAGE_NONE][$index]['safe_value'];
  }
  elseif (!empty($usr->{$field}[LANGUAGE_NONE][$index]['value'])) {
    return $usr->{$field}[LANGUAGE_NONE][$index]['value'];
  }
  return $default;
}
/**
 * Determine if the profile is complete.
 *
 * @param $usr (object) A Drupal user object.
 * @param $role (string) The role to test.
 *
 * @return (bool) True if the user has a completed profile.
 */
function _contest_has_complete_profile($usr, $role = 'entrant') {
  $status = (_contest_get_usr_val($usr, 'field_contest_name') && _contest_get_usr_val($usr, 'field_contest_address') && _contest_get_usr_val($usr, 'field_contest_city') && _contest_get_usr_val($usr, 'field_contest_state') && _contest_get_usr_val($usr, 'field_contest_zip') && _contest_get_usr_val($usr, 'field_contest_phone'))? TRUE: FALSE;

  switch ($role) {
    case 'entrant':
      return $status;

    case 'host':
      return ($status && _contest_get_usr_val($usr, 'field_contest_business'))? TRUE: FALSE;
  }
  return FALSE;
}
/**
 * Generate a UNIX timestamp from an array.
 *
 * @param $date (array) An array with day, month and year.
 *
 * @return (int) A UNIX timestamp.
 */
function _contest_mktime($date) {
  if (!isset($date['day']) || !isset($date['month']) || !isset($date['year'])) {
    return NULL;
  }
  return mktime(0, 0, 0, intval($date['month']), intval($date['day']), intval($date['year']));
}
/**
 * Determine if the minimum age requirement has been met.
 *
 * @param $age (int|array) The birthdate in either UNIX time or an array with year, month, day.
 *
 * @return (bool) True if the minimum age requirement is met, otherwise false.
 */
function _contest_min_age($age = NULL) {
  $min_date = mktime(0, 0, 0, intval(date('n')), intval(date('j')), (intval(date('Y')) - variable_get('contest_min_age', 18)));

  if (is_int($age)) {
    $birthday = $age;
  }
  elseif (isset($age['day']) && isset($age['month']) && isset($age['year'])) {
    $birthday = mktime(0, 0, 0, intval($age['month']), intval($age['day']), intval($age['year']));
  }
  else {
    return FALSE;
  }
  return ($birthday <= $min_date)? TRUE: FALSE;
}
/**
 * Generate a unique username.
 *
 * @param $name (string) The user's name.
 *
 * @return $username (string) A unique username.
 */
function _contest_name_gen($name) {
  $min = 10;
  $max = 99;
  $username = $name;

  for ($i = $min; $i <= $max; $i++) {
    $found = db_query_range("SELECT 1 FROM {users} WHERE name = :name", 0, 1, array(':name' => $username))->fetchField();

    if (!$found) {
      return $username;
    }
    $username = preg_replace('/\W/', '', strtolower($name)) . '-' . rand($min, $max);
  }
  return _contest_name_gen($username);
}
/**
 * Delete the requested files.
 *
 * @param $file_regx (string) A posix regex.
 * @param $age (int) The age of the files in seconds.
 *
 * @return (int) The number of files deleted.
 */
function _contest_purge_dir($file_regx, $age) {
  $count = 0;
  $files = glob($file_regx);

  foreach ($files as $file) {
    if (is_file($file) && (REQUEST_TIME - filemtime($file)) >= $age) {
      chmod($file, 0777);
      unlink($file);
      $count++;
    }
  }
  return $count;
}
/**
 * Remove old contest export files.
 *
 * @return (int|bool) The number of files deleted.
 */
function _contest_purge_exports() {
  $max_age = 3600;
  $sub_dir = variable_get('contest_export_dir', '');
  $wrapper = file_stream_wrapper_get_instance_by_uri('private://');

  if (!$sub_dir || !$wrapper) {
    return FALSE;
  }
  $file_regx = $wrapper->getDirectoryPath() . "/$sub_dir/*.csv";

  return _contest_purge_dir($file_regx, $max_age);
}
/**
 * Convert the provided string to a lowercase stroke delimited string, (uppercase converted to lower, consequitive non alpha-numeric characters converted to a stroke).
 *
 * @param $txt (string) The string to convert.
 *
 * @return (string) A lowercase stroke delimited string.
 */
function _contest_stroked($txt) {
  return preg_replace(array('/[^a-z0-9]+/', '/^-+|-+$/'), array('-', ''), strtolower($txt));
}
/**
 * Create a summary from the provided text.
 *
 * @param $string (string) The string to trim.
 * @param $max (int) The target length of the string.
 *
 * @return $txt (string) The provided text truncated to the requested length.
 */
function _contest_trim($string, $max = 150) {
  $chars = 0;
  $txt = '';

  foreach (preg_split('/\s+/', $string) as $atom) {
    $length = strlen($atom);
    if (($length + strlen($txt) + 1) > $max) {
      return preg_match('/<\/p>$/', $txt)? preg_replace('/<\/p>$/', '&hellip;</p>', $txt): "$txt&hellip;</p>";
    }
    $txt .= $txt? " $atom": $atom;
  }
  return $txt;
}
/**
 * Save the contest profile fields to the user object.
 *
 * @param $usr (object) A Drupal user object.
 * @param $form_state (array) A form state array.
 *
 * @return (object) A fully loaded user object.
 */
function _contest_usr_save($usr = NULL, $form_state = array()) {
  $birthday = _contest_mktime($form_state['values']['contest_birthdate']);

  if (empty($usr->uid) || empty($form_state)) {
    return user_load(0);
  }
  $usr->field_contest_address[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_address'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_address'],
  );
  $usr->field_contest_birthdate[LANGUAGE_NONE][0] = array(
    'value'      => $birthday,
    'formt'      => 'plain_text',
    'safe_value' => $birthday,
  );
  $usr->field_contest_city[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_city'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_city'],
  );
  $usr->field_contest_name[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_name'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_name'],
  );
  $usr->field_contest_phone[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_phone'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_phone'],
  );
  $usr->field_contest_state[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_state'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_state'],
  );
  $usr->field_contest_zip[LANGUAGE_NONE][0] = array(
    'value'      => $form_state['values']['contest_zip'],
    'formt'      => 'plain_text',
    'safe_value' => $form_state['values']['contest_zip'],
  );
  $usr->field_contest_optin[LANGUAGE_NONE][0] = array(
    'value' => $form_state['values']['contest_optin'],
  );
  return user_save($usr);
}