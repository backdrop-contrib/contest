<?php

/**
 * @file
 * The installation file for the contest module.
 */

/**
 * Implementation of hook_enable().
 * Create the profile fields and export directory. 
 */
function contest_enable() {
  
// Enable the field_ui module, (we don't have it as a dependency so we can remove it later if we so choose).

  if (!module_exists('field_ui')) {
    if (!module_enable(array('field_ui'))) {
      return _contest_feedback('Aborting! The field_ui module must exist to enable the contest module. It\'s not set as a dependency so it can be disabled later if desired.');
    }
  }
  _contest_install_profile_fields();
  
  _contest_create_export_directory(variable_get('contest_export_dir', 'contest_export'));
}
/**
 * Implementation of hook_install().
 */
function contest_install() {
  $day = 86400;
  
  variable_set('contest_export_dir', 'contest_export'); // The contest results export directory.
  variable_set('contest_hog_days', 89);                 // The number of days between a persons eligibility to win another contest.
  variable_get('contest_host_county', 'US');            // The country the contest is running, (for legal reasons I don't anticipate supporting non-US contests but...).
  variable_set('contest_host_uid', 1);                  // The contest host's user id. We'll set it to the admin's to start.

// We'll use the admin's name as the default host's title.

  $user = user_load(1);
  variable_set('contest_host_title', $user->name);

// The time period between a user's contest entries, (default is daily).

  $periods = array(
    2147483646   => 'once',
    $day         => 'daily',
    (7 * $day)   => 'weekly',
    (30 * $day)  => 'monthly',
    (365 * $day) => 'yearly',
  );
  variable_set('contest_period', $periods);
}
/**
 * Implementation of hook_requirements().
 */
function contest_requirements($phase) {
  $reqs = array();

  switch ($phase) {
    case 'install':
      if (!file_stream_wrapper_get_instance_by_uri('private://')) {
        $reqs['system'] = array(
          'title'       => 'File System',
          'value'       => t("Private file system path isn't configured."),
          'severity'    => REQUIREMENT_ERROR,
          'description' => t("Aborting! Drupal's file system path needs to be configured. Please go to !link to configure.<br />\n", array('!link' => l('File System', 'admin/config/media/file-system', array('attributes' => array('target' => '_blank'))))),
        );
      }
      break;
  }
  return $reqs;
}
/**
 * Implementation of hook_schema().
 */
function contest_schema() {
  $schema['contest'] = array(
    'description' => 'Stores contest-specific information for contest nodes.',
    'fields' => array(
      'nid' => array(
        'description' => "The contest's {node}.nid.",
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'vid' => array(
        'description' => "The contest's {node}.vid.",
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'sponsor_uid' => array(
        'description' => "The sponsor's {user}.uid.",
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'sponsor_url' => array(
        'description' => '',
        'type'        => 'varchar',
        'length'      => 100,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'start' => array(
        'description' => 'The contest start date.',
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'end' => array(
        'description' => 'The contest end date.',
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'places' => array(
        'description' => 'The number of places in the contest.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'period' => array(
        'description' => 'The length of time the contest will run.',
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'publish_winners' => array(
        'description' => 'A flag to determine if the winners should be displayed.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
    ),
    'indexes' => array(
      'start' => array('start'),
      'end'   => array('end'),
    ),
    'primary key' => array('nid'),
  );
  $schema['contest_entry'] = array(
    'description' => 'Stores contest entries.',
    'fields' => array(
      'nid' => array(
        'description' => "The contest's {node}.nid.",
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'uid' => array(
        'description' => "The entrants's {user}.uid.",
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'created' => array(
        'description' => 'The date of the contest entry.',
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'ip' => array(
        'description' => "The entrant's IP address.",
        'type'        => 'varchar',
        'length'      => 16,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'winner' => array(
        'description' => 'A flag to determine if the winners should be displayed.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
    'primary key' => array('nid', 'uid', 'created'),
  );
  return $schema;
}
/**
 * Implementation of hook_uninstall()
 */
function contest_uninstall () {
  $export_dir = variable_get('contest_export_dir', 'contest_export');
  $wrapper = file_stream_wrapper_get_instance_by_uri('private://');
  
// Remove the export directory.

  if ($wrapper) {
    $export_dir = $wrapper->getDirectoryPath() . "/$export_dir";
    _contest_install_purge_dir("$export_dir/*", 0);
    chmod($export_dir, 0777);
    rmdir($export_dir);
  }  
// Delete the variables.

  $rows = db_query("SELECT name FROM {variable} WHERE name LIKE :name", array(':name' => 'contest\_%'))->fetchAll();
  foreach ($rows as $row) {
    variable_del($row->name);
  }
}
/**
 * Create the profile fields used by a contest.
 */
function _contest_install_profile_fields() {
  $field_prefix = 'field_contest';
  $fields = array(
    (object) array(
      'label'  => 'Real Name',
      'name'   => 'name',
      'desc'   => 'Your real name for contact/legal reasons.',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'Business',
      'name'   => 'business',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'Address',
      'name'   => 'address',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'City',
      'name'   => 'city',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'State',
      'name'   => 'state',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'Zip',
      'name'   => 'zip',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 10,
    ),
    (object) array(
      'label'  => 'Country',
      'name'   => 'country',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 50,
    ),
    (object) array(
      'label'  => 'Phone',
      'name'   => 'phone',
      'desc'   => '',
      'type'   => 'text',
      'widget' => 'textfield',
      'length' => 20,
    ),
    (object) array(
      'label'  => 'Opt In',
      'name'   => 'optin',
      'desc'   => 'I would like to receive promotional efforts from the contest sponsors and promoters.',
      'type'   => 'list_boolean',
      'widget' => 'options_onoff',
      'length' => 1,
    ),
  );
  $weight = (count($fields) + 1) * -10;
  
  foreach ($fields as $index => $field) {
    if (field_info_field("{$field_prefix}_{$field->name}")) {
      continue;
    }
    $prototype = array(
      'field_name' => "{$field_prefix}_{$field->name}", 
      'type'       => $field->type, 
      'settings'   => array('max_length' => $field->length),
    );
    if ($field->type == 'options_onoff') {
      unset($prototype['settings']['max_length']);
    }
    field_create_field($prototype);
    
    $instance = array(
      'field_name'  => "{$field_prefix}_{$field->name}", 
      'entity_type' => 'user', 
      'label'       => $field->label, 
      'bundle'      => 'user', 
      'required'    => FALSE,
      'settings'    => array('user_register_form' => 0),
      'widget'      => array(
        'type'       => $field->widget,
        'weight'     => $weight + ($index * 10),
      ), 
    );
    if ($field->type == 'options_onoff') {
      $instance['settings']['allowed_values'] = array(
        '0' => 'No',
        '1' => 'Yes',
      );
      $instance['widget']['display_label'] = 1;
    }
    field_create_instance($instance);
  }
}
/**
 * Delete the requested files.
 *
 * @param $file_regx (string) A posix regex.
 * @param $age (int) The age of the files in seconds.
 *
 * @return (int) The number of files deleted.
 */
function _contest_install_purge_dir($file_regx, $age) {
  $count = 0;
  $files = glob($file_regx);
  $now = time();

  foreach ($files as $file) {
    if (is_file($file) && ($now - filemtime($file)) >= $age) {
      chmod($file, 0777);
      unlink($file);
      $count++;
    }
  }
  return $count;
}
